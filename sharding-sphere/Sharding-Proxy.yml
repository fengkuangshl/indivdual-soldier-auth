#1、 拉取镜像
docker pull apache/sharding-proxy

#2、 运行sharding-proxy镜像
docker run -d \
-v /mydata/sharding-proxy/conf:/opt/sharding-proxy/conf \
-v/mydata/sharding-proxy/lib:/opt/sharding-proxy/lib \
--env PORT=3308 \
-p 13308:3308 \
apache/sharding-proxy:latest

#3、config-mallshard.yaml配置
vi /mydata/sharding-proxy/conf/config-mallshard.yaml

schemaName: sharding_db
dataSources:
  ds0:
    url: jdbc:mysql://192.168.1.222:3307/ds0
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 65
  ds0_slave0:
    url: jdbc:mysql://192.168.1.222:3317/ds0
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 65
  ds1:
    url: jdbc:mysql://192.168.56.10:3307/ds1
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 65
  ds1_slave0:
    url: jdbc:mysql://192.168.56.10:3317/ds1
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 65
shardingRule:
  tables:
    t_order:
      actualDataNodes: ds${0..1}.t_order${0..1}
      databaseStrategy:
        inline:
          shardingColumn: user_id
          algorithmExpression: ds${user_id % 2}
      tableStrategy:
        inline:
          shardingColumn: order_id
          algorithmExpression: t_order${order_id % 2}
        keyGenerator:
          type: SNOWFLAKE
          column: order_id
    t_order_item:
      actualDataNodes: ds${0..1}.t_order_item${0..1}
      databaseStrategy:
        inline:
          shardingColumn: user_id
          algorithmExpression: ds${user_id % 2}
      tableStrategy:
        inline:
          shardingColumn: order_id
          algorithmExpression: t_order_item${order_id % 2}
        keyGenerator:
          type: SNOWFLAKE
          column: order_item_id
    bindingTables:
      - t_order,t_order_item
    broadcastTables:
      - t_config
    defaultDataSourceName: ds0
    defaultTableStrategy:
      none:
    masterSlaveRules:
      ms_ds0:
        masterDataSourceName: ds0
        slaveDataSourceNames:
          - ds0_slave0
        loadBalanceAlgorithmType: ROUND_ROBIN
      ms_ds1:
        masterDataSourceName: ds1
        slaveDataSourceNames:
          - ds1_slave0
        loadBalanceAlgorithmType: ROUND_ROBIN