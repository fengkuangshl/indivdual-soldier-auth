#1、 拉取镜像
docker pull apache/sharding-proxy

#2、 运行sharding-proxy镜像
  docker run -d \
  -v /mydata/sharding-proxy/conf:/opt/shardingsphere-proxy/conf \
  -v /mydata/sharding-proxy/ext-lib:/opt/shardingsphere-proxy/ext-lib \
  -e ES_JAVA_OPTS="-Xmx256m -Xms256m -Xmn128m" \
  -p 3321:3307 \
  --name server-proxy \
  apache/shardingsphere-proxy:5.2.1
#2.1、将本目录下的mysql-connector-java-8.0.20.jar copy至/mydata/sharding-proxy/ext-lib下

#3、config-readwrite-splitting.yaml配置
vi /mydata/sharding-proxy/conf/config-readwrite-splitting.yaml

databaseName: readwrite_splitting_db
#
dataSources:
  master:
    url: jdbc:mysql://192.168.1.222:3307/individual-soldier-auth?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  slave01:
    url: jdbc:mysql://192.168.1.222:3317/individual-soldier-auth?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
#  read_ds_1:
#    url: jdbc:mysql://127.0.0.1:3306/demo_read_ds_1?serverTimezone=UTC&useSSL=false
#    username: root
#    password:
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
#
rules:
  - !READWRITE_SPLITTING
    dataSources:
      readwrite_ds:
        staticStrategy:
          writeDataSourceName: master
          readDataSourceNames:
            - slave01
        loadBalancerName: lbn_random
    loadBalancers:
      lbn_random:
        type: RANDOM
#3、config-sharding-vertical.yaml配置
vi /mydata/sharding-proxy/conf/config-sharding-vertical.yaml

databaseName: sharding_vertical_db

dataSources:
  # 配置第 0 个数据源
  businessCenter:
    url: jdbc:mysql://192.168.1.222:3308/business_center?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
    # 配置第 2 个数据源
  fileCenter:
    url: jdbc:mysql://192.168.1.222:3309/file_center?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  # 配置第 3 个数据源
  logCenter:
    url: jdbc:mysql://192.168.1.222:3310/log_center?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  # 配置第 4 个数据源
  paramCenter:
    url: jdbc:mysql://192.168.1.222:3311/param_center?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  # 配置第 5 个数据源
  userCenter:
    url: jdbc:mysql://192.168.1.222:3312/user_center?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
rules:
  - !SHARDING
    tables:
      # user-center
      sys_group:
        actualDataNodes: userCenter.sys_group
      sys_menu:
        actualDataNodes: userCenter.sys_menu
      sys_menu_permission:
        actualDataNodes: userCenter.sys_menu_permission
      sys_permission:
        actualDataNodes: userCenter.sys_permission
      sys_role:
        actualDataNodes: userCenter.sys_role
      sys_role_menu_permission:
        actualDataNodes: userCenter.sys_role_menu_permission
      sys_user:
        actualDataNodes: userCenter.sys_user
      sys_user_role:
        actualDataNodes: userCenter.sys_user_role
      sys_user_group:
        actualDataNodes: userCenter.sys_user_group
      sys_dic_data:
        actualDataNodes: paramCenter.sys_dict_tree
      sys_dic_type:
        actualDataNodes: paramCenter.sys_dict_tree
      sys_dict_tree:
        actualDataNodes: paramCenter.sys_dict_tree
      # file-center
      sys_chunk_file:
        actualDataNodes: fileCenter.sys_chunk_file
      sys_file_info:
        actualDataNodes: fileCenter.sys_file_info
      # log-center
      sys_data_log:
        actualDataNodes: logCenter.sys_data_log
      sys_log:
        actualDataNodes: logCenter.sys_log
      # business-center
      device_auth:
        actualDataNodes: businessCenter.device_auth
      device_customer_info:
        actualDataNodes: businessCenter.device_customer_info
#4、config-sharding-horizontal.yaml配置
vi /mydata/sharding-proxy/conf/config-sharding-horizontal.yaml
databaseName: sharding_horizontal_db

dataSources:
  # 配置第 0 个数据源
  businessCenter0:
    url: jdbc:mysql://192.168.1.222:3313/business_center?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  # 配置第 1 个数据源
  businessCenter1:
    url: jdbc:mysql://192.168.1.222:3314/business_center?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
    # 配置第 2 个数据源
  fileCenter:
    url: jdbc:mysql://192.168.1.222:3309/file_center?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  # 配置第 3 个数据源
  logCenter:
    url: jdbc:mysql://192.168.1.222:3310/log_center?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  # 配置第 5 个数据源
  userCenter:
    url: jdbc:mysql://192.168.1.222:3312/user_center?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: root
    password: root
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
rules:
  - !SHARDING
    tables:
      # user-center
      sys_group:
        actualDataNodes: userCenter.sys_group
      sys_menu:
        actualDataNodes: userCenter.sys_menu
      sys_menu_permission:
        actualDataNodes: userCenter.sys_menu_permission
      sys_permission:
        actualDataNodes: userCenter.sys_permission
      sys_role:
        actualDataNodes: userCenter.sys_role
      sys_role_menu_permission:
        actualDataNodes: userCenter.sys_role_menu_permission
      sys_user:
        actualDataNodes: userCenter.sys_user
      sys_user_role:
        actualDataNodes: userCenter.sys_user_role
      sys_user_group:
        actualDataNodes: userCenter.sys_user_group
        # 广播表的配置
      sys_dic_data:
        actualDataNodes: businessCenter$->{0..1}.sys_dic_data,logCenter.sys_dic_data,userCenter.sys_dic_data,fileCenter.sys_dict_tree
      sys_dic_type:
        actualDataNodes: businessCenter$->{0..1}.sys_dic_type,logCenter.sys_dic_type,userCenter.sys_dic_type,fileCenter.sys_dict_tree
      sys_dict_tree:
        actualDataNodes: businessCenter$->{0..1}.sys_dict_tree,logCenter.sys_dict_tree,userCenter.sys_dict_tree,fileCenter.sys_dict_tree
      # file-center
      sys_chunk_file:
        actualDataNodes: fileCenter.sys_chunk_file
      sys_file_info:
        actualDataNodes: fileCenter.sys_file_info
      # log-center
      sys_data_log:
        actualDataNodes: logCenter.sys_data_log
      sys_log:
        actualDataNodes: logCenter.sys_log
      # business-center
      device_auth:
        actualDataNodes: businessCenter$->{0..1}.device_auth_$->{0..1}
        # 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
        # 用于单分片键的标准分片场景
        databaseStrategy:
          standard:
            shardingColumn: create_user_id # 分片列名称
            shardingAlgorithmName: alg-mod # 分片算法名称
        #分表策略
        tableStrategy:
          standard:
            shardingColumn: auth_Code # 分片列名称
            shardingAlgorithmName: alg-hash-mod # 分片算法名称
        # 分布式序列策略配置
        keyGenerateStrategy:
          column: id # 分布式序列列名称
          keyGeneratorName: alg-sonwflake # 分布式序列算法名称
      device_customer_info:
        actualDataNodes: businessCenter$->{0..1}.device_customer_info_$->{0..1}
        # 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
        # 用于单分片键的标准分片场景
        databaseStrategy:
          standard:
            shardingColumn: create_user_id # 分片列名称
            shardingAlgorithmName: alg-mod # 分片算法名称
        #分表策略
        tableStrategy:
          standard:
            shardingColumn: auth_device_code # 分片列名称
            shardingAlgorithmName: alg-hash-mod # 分片算法名称
        # 分布式序列策略配置
        keyGenerateStrategy:
          column: id # 分布式序列列名称
          keyGeneratorName: alg-sonwflake # 分布式序列算法名称
    # 默认数据库分片策略
    #        defaultDatabaseStrategy:
    #          standard:
    #            shardingColumn: id  # 分片列名称
    #            shardingAlgorithmName: alg-mod # 分片算法名称
    # 分片算法配置
    shardingAlgorithms:
      alg-hash-mod:
        type: HASH_MOD # 分片算法类型
        props:
          sharding-count: 2 #分片数量
      alg-mod:
        type: MOD # 分片算法类型
        props:
          sharding-count: 2
          # algorithm-expression: businessCenter$->{0..1}.{create_user_id % 2}
    keyGenerators:
      alg-sonwflake:
        type: SNOWFLAKE
    # 绑定表规则列表,用逗号隔开
    bindingTables:
      - device_customer_info,device_auth
    # 广播表规则列表
    broadcastTables:
      - sys_dic_data
      - sys_dic_type
      - sys_dict_tree
#4、server.yaml配置
  vi /mydata/sharding-proxy/conf/server.yaml

mode:
  type: Standalone
  repository:
    type: JDBC
    # props:
    #   namespace: governance_ds
    #   server-lists: localhost:2181
    #   retryIntervalMilliseconds: 500
    #   timeToLiveSeconds: 60
    #   maxRetries: 3
    #   operationTimeoutMilliseconds: 500
#
rules:
  - !AUTHORITY
    users:
      - root@%:root
      - sharding@:sharding
    provider:
      type: ALL_PERMITTED
#  - !TRANSACTION
#    defaultType: LOCAL
#    providerType: Atomikos
#  - !SQL_PARSER
#    sqlCommentParseEnabled: true
#    sqlStatementCache:
#      initialCapacity: 2000
#      maximumSize: 65535
#    parseTreeCache:
#      initialCapacity: 128
#      maximumSize: 1024

props:
  max-connections-size-per-query: 1
  kernel-executor-size: 16 # Infinite by default.
  proxy-frontend-flush-threshold: 128 # The default value is 128.
  proxy-hint-enabled: false
  sql-show: true
  check-table-metadata-enabled: false
  #    # Proxy backend query fetch size. A larger value may increase the memory usage of ShardingSphere Proxy.
  #    # The default value is -1, which means set the minimum value for different JDBC drivers.
  #  proxy-backend-query-fetch-size: -1
  #  proxy-frontend-executor-size: 0 # Proxy frontend executor size. The default value is 0, which means let Netty decide.
  #    # Available options of proxy backend executor suitable: OLAP(default), OLTP. The OLTP option may reduce time cost of writing packets to client, but it may increase the latency of SQL execution
  #    # and block other clients if client connections are more than `proxy-frontend-executor-size`, especially executing slow SQL.
  #  proxy-backend-executor-suitable: OLAP
  #  proxy-frontend-max-connections: 0 # Less than or equal to 0 means no limitation.
  #    # Available sql federation type: NONE (default), ORIGINAL, ADVANCED
  #  sql-federation-type: NONE
  #    # Available proxy backend driver type: JDBC (default), ExperimentalVertx
  #  proxy-backend-driver-type: JDBC
  proxy-mysql-default-version: 5.7 # In the absence of schema name, the default version will be used.
  proxy-default-port: 3307 # Proxy default port.
#  proxy-netty-backlog: 1024 # Proxy netty backlog.


#4、所有配置信息配置完成，记得重启shardingshpere-proxy的docker服务
docker restart server-proxy
